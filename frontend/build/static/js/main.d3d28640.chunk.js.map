{"version":3,"sources":["logo.svg","screens/RegisterScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","foodTypes","registerRestaurant","_ref","name","latLng","types","fetch","BASE_URL","method","headers","Content-Type","body","JSON","stringify","location","RegisterScreen","_useState","useState","_useState2","Object","slicedToArray","setName","_useState3","lat","lng","_useState4","setLatLng","_useState5","_useState6","setTypes","react_default","a","createElement","style","flex","alignItems","justifyContent","height","paddingTop","alignSelf","index_es","flexDirection","width","title","placeholder","value","onChange","e","target","padding","map","key","onClick","includes","splice","indexOf","toConsumableArray","concat","label","variant","alert","then","r","console","log","error","token","App","screens_RegisterScreen","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3d28640.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react'\nimport {\n  Input,\n  Card,\n  Chip,\n  CardHeader,\n  CardContent,\n  Button\n} from '@material-ui/core'\nimport { BASE_URL } from '../constants'\n\nconst foodTypes = ['Burger', 'Kebab', 'Pizza']\nconst url = '/restaurant/register'\n\nconst registerRestaurant = ({ name, latLng, types }) =>\n  fetch(BASE_URL + url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      location: latLng,\n      foodTypes: types\n    })\n  })\n\nfunction RegisterScreen() {\n  const [name, setName] = useState('')\n  const [latLng, setLatLng] = useState({ lat: '', lng: '' })\n  const [types, setTypes] = useState([])\n  const { lat, lng } = latLng\n\n  const onSubmit = () => {\n    if ((name === '') | (lat === '') | (lng === ''))\n      alert('Please enter all the fields.')\n    else {\n      registerRestaurant({ name, latLng, types }).then(r => {\n        console.log(r)\n        if (r.error) {\n          alert(r.error)\n          return null\n        } else {\n          console.log('SUCCESS!!!!!')\n          return r.token\n        }\n      })\n    }\n  }\n\n  return (\n    <div\n      style={{\n        flex: 1,\n        //  position: 'absolute',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: !'100%',\n        paddingTop: '200px',\n        alignSelf: 'center'\n      }}\n    >\n      <Card style={{ flexDirection: 'column', width: '400px' }}>\n        <CardHeader title=\"UNLABELLED for restaurants\" />\n        <CardContent style={{ flexDirection: 'column' }}>\n          <Input\n            placeholder=\"restaurant name\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n          <div style={{ flexDirection: 'row' }}>\n            <Input\n              placeholder=\"lattitude\"\n              value={lat}\n              onChange={e => setLatLng({ lat: e.target.value, lng })}\n            />\n            <Input\n              placeholder=\"longitude\"\n              value={lng}\n              onChange={e => setLatLng({ lat, lng: e.target.value })}\n            />\n          </div>\n          <div style={{ flexDirection: 'row', padding: 8 }}>\n            {foodTypes.map(e => (\n              <Chip\n                key={e}\n                onClick={() => {\n                  if (types.includes(e)) {\n                    types.splice(types.indexOf(e), 1)\n                    setTypes([...types])\n                  } else {\n                    setTypes([...types, e])\n                  }\n                }}\n                label={e}\n                variant={types.includes(e) ? 'default' : 'outlined'}\n                padding={4}\n              />\n            ))}\n          </div>\n\n          <Button onClick={onSubmit}>Register</Button>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default RegisterScreen\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport RegisterScreen from './screens/RegisterScreen'\n\nclass App extends Component {\n  render() {\n    return <RegisterScreen />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}